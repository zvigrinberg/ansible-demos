---
# This role contains tasks to provision lxc containers for installing k8s cluster on Ubuntu Hosts

- name: Install lxd
  community.general.snap:
    name: lxd

- name: Install lxc
  apt: name={{ item }} state=present
  with_items:
    - lxc
    - lxc-dev
    - python3-pip

- name: Install lxc-python2 Package
  ansible.builtin.pip:
    name: lxc
    state: present
    executable: /home/zgrinber/.local/bin/pip3


- name: Initalize lxd Daemon
  command: lxd init --auto --storage-backend=dir
  register: the_result
  failed_when: the_result.rc not in [0, 1]

- name: Create lxc k8s profile
  command: lxc profile create k8s -q
  register: the_result
  failed_when: the_result.rc not in [0, 1]


- name: Copy k8s profile file
  copy:
    src: k8s-config-profile.yaml
    dest: /tmp/k8s-config-profile.yaml
    mode: 0777

- name: Inject file into profile
  shell:
    cmd: lxc profile edit k8s < /tmp/k8s-config-profile.yaml

- name: Create lxc Containers
  lxd_container:
    name: "{{ item }}"
    state: started
    source:
      type: image
      mode: pull
      server: https://images.linuxcontainers.org
      protocol: simplestreams
      alias: ubuntu/jammy/amd64
    profiles: ["k8s"]
    wait_for_ipv4_addresses: true

  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"
  register: containers_struct

- name: Debug containers Struct
  debug:
    msg: "{{ containers_struct.results}}"

- name: Create Groups of nodes
  group_by:
    key: "{{ item }}"
  loop:
    - "masters"
    - "workers"


- name: Add worker containers nodes to in-memory inventory groups workers
  add_host:
    name: "{{item.item}}"
    ansible_host: "{{ item.addresses.eth0[0]}}"
    ansible_user: root
    groups: workers
  when: '"worker" in item.item'
  loop:  "{{containers_struct.results}}"

- name: Add master containers nodes to in-memory inventory groups masters
  add_host:
    name: "{{item.item}}"
    ansible_host: "{{ item.addresses.eth0[0]}}"
    ansible_user: root
    groups: masters
  when: '"master" in item.item'
  loop:  "{{containers_struct.results}}"

- name: Install Openssh Server on all containers
  shell:
    cmd: lxc exec {{ item }} -- bash -c "apt install openssh-server"
  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"

- name: Upload public key from host VM to authorized_keys of all containers
  become: true
  become_user: "{{ user_ssh_public_key }}"
  shell:
    cmd: cat ~/.ssh/id_rsa.pub | lxc exec {{ item }} -- bash -c  "mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod -R go= ~/.ssh && cat >> ~/.ssh/authorized_keys"
  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"

- name: Disable Password authentication for SSH on all containers and restart SSH daemon
  shell:
    cmd: lxc exec {{ item }} -- bash -c "sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config ; systemctl restart ssh"
  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"

- name: Check python3 is installed in containers
  delegate_to: "{{item}}"
  ansible.builtin.raw: dpkg -s python3
  remote_user: root
  failed_when: python_install_check.rc not in [0, 1]
  register: python_install_check
  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"

#    changed_when: false

- name: Install python on all containers
  delegate_to: "{{item.item}}"
  remote_user: root
  ansible.builtin.raw: apt-get install -y python3
  when: item.rc == 1
  loop:  "{{python_install_check.results}}"
