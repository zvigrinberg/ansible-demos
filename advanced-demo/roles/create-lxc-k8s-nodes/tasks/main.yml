---
# This role contains tasks to provision lxc containers for installing k8s cluster on Ubuntu Hosts

- name: Install lxd
  community.general.snap:
    name: lxd

- name: Install lxc
  apt: name={{ item }} state=present
  with_items:
    - lxc
    - lxc-dev
    - python3-pip
    - curl

- name: Install lxc-python2 Package
  ansible.builtin.pip:
    name: lxc
    state: present
    executable: /home/zgrinber/.local/bin/pip3


- name: Initalize lxd Daemon
  command: lxd init --auto --storage-backend=dir
  register: the_result
  failed_when: the_result.rc not in [0, 1]

- name: Create lxc k8s profile
  command: lxc profile create k8s -q
  register: the_result
  failed_when: the_result.rc not in [0, 1]


- name: Copy k8s profile file
  template:
    src: k8s-config-profile.j2
    dest: /tmp/k8s-config-profile.yaml
    mode: 0777

- name: Inject file into profile
  shell:
    cmd: lxc profile edit k8s < /tmp/k8s-config-profile.yaml

- name: Create lxc Containers
  lxd_container:
    name: "{{ item }}"
    state: started
    source:
      type: image
      mode: pull
      server: https://images.linuxcontainers.org
      protocol: simplestreams
      alias: ubuntu/jammy/amd64
    profiles: ["k8s"]
    wait_for_ipv4_addresses: true

  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"
    - "kworker3"
  register: containers_struct


- name: Delete lxc Containers
  lxd_container:
    name: "{{ item }}"
    state: absent
  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"
    - "kworker3"
  tags: never

- name: Debug containers Struct
  debug:
    msg: "{{ containers_struct.results}}"

- name: Create Groups of nodes
  group_by:
    key: "{{ item }}"
  loop:
    - "masters"
    - "workers"


- name: Add worker containers nodes to in-memory inventory groups workers
  add_host:
    name: "{{item.item}}"
    ansible_host: "{{ item.addresses.eth0[0]}}"
    ansible_user: root
    groups: workers
  when: '"worker" in item.item'
  loop:  "{{containers_struct.results}}"

- name: Add master containers nodes to in-memory inventory groups masters
  add_host:
    name: "{{item.item}}"
    ansible_host: "{{ item.addresses.eth0[0]}}"
    ansible_user: root
    groups: masters
  when: '"master" in item.item'
  loop:  "{{containers_struct.results}}"

# Need to delete known_hosts file in order to avoid collisions of provisioned containers' ip's with historic ip`s
- name: delete known_hosts file on Host
  become: true
  become_user: "{{ user_ssh_public_key }}"
  ansible.builtin.file:
    path: ~/.ssh/known_hosts
    state: absent

# Remove never tag if openssh is not present in the container image
- name: Install Openssh Server on all containers
  shell:
    cmd: lxc exec {{ item }} -- bash -c "apt-get -y install openssh-server"
  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"
    - "kworker3"

#- name: Make sure that ssh service is up and running on all nodes
#  service:
#    name: ssh
#    enabled: true
#    state: started


- name: Checks whether ssh key pair exists
  become: true
  become_user: "{{ user_ssh_public_key }}"
  stat:
    path: ~/.ssh/id_rsa
  register: ssh_key_pair

- name: Generate ssh key pair if doesn't exists
  become: true
  become_user: "{{ user_ssh_public_key }}"
  openssh_keypair:
    path: ~/.ssh/id_rsa
  when: not ssh_key_pair.stat.exists


- name: Upload public key from host VM to authorized_keys of all containers
  become: true
  become_user: "{{ user_ssh_public_key }}"
  shell:
    cmd: cat ~/.ssh/id_rsa.pub | lxc exec {{ item }} -- bash -c  "mkdir -p ~/.ssh && touch ~/.ssh/authorized_keys && chmod -R go= ~/.ssh && cat >> ~/.ssh/authorized_keys"
  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"
    - "kworker3"


- name: Add all nodes with public key to ssh known_hosts file
  become: true
  become_user: "{{ user_ssh_public_key }}"
  known_hosts:
    name: "{{ item.addresses.eth0[0] }}"
    hash_host: true
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa {{ item.addresses.eth0[0] }}') }}"
  loop:  "{{containers_struct.results}}"


- name: Disable Password authentication for SSH on all containers and restart SSH daemon
  shell:
    cmd: lxc exec {{ item }} -- bash -c "sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config ; systemctl restart ssh"
  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"
    - "kworker3"

- name: Check python3 is installed in containers
  delegate_to: "{{item}}"
  ansible.builtin.raw: dpkg -s python3
  remote_user: root
  failed_when: python_install_check.rc not in [0, 1]
  register: python_install_check
  loop:
    - "kmaster"
    - "kworker1"
    - "kworker2"
    - "kworker3"

#    changed_when: false

- name: Install python on all containers
  delegate_to: "{{item.item}}"
  remote_user: root
  ansible.builtin.raw: apt-get install -y python3
  when: item.rc == 1
  loop:  "{{python_install_check.results}}"
