---
# tasks file for install-k8s

- name: Verify that all needed ports are opened
  shell: |
    nc -l 127.0.0.1 {{ item }} & \
    sleep 0.05
    nc -zv 127.0.0.1 {{ item }}
  register: result
  loop:
    - 6443
    - 2379
    - 2380
    - 10250
    - 10259
    - 10257


- name: Installs curl if it doesn't installed
  apt:
    name: curl
    state: present

- name: Add cri-o apt repository to hosts
  shell: |
    echo "deb [signed-by=/usr/share/keyrings/libcontainers-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ crio_os_version }}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    echo "deb [signed-by=/usr/share/keyrings/libcontainers-crio-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ crio_version }}/{{ crio_os_version }}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}.list

- name: Download gpg keys for the cri-o repostiory and fetch repositories.
  shell: |
    mkdir -p /usr/share/keyrings
    curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ crio_os_version }}/Release.key | gpg --dearmor -o /usr/share/keyrings/libcontainers-archive-keyring.gpg
    curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ crio_version }}/{{ crio_os_version }}/Release.key | gpg --dearmor -o /usr/share/keyrings/libcontainers-crio-archive-keyring.gpg
    apt-get update

- name: Install cri-o container runtime and its dependencies
  apt:
    package:
      - cri-o
      - cri-o-runc
      - libbtrfs-dev
      - containers-common
      - git
      - golang-go
      - libassuan-dev
      - libdevmapper-dev
      - libglib2.0-dev
      - libc6-dev
      - libgpgme-dev
      - libgpg-error-dev
      - libseccomp-dev
      - libsystemd-dev
      - libselinux1-dev
      - pkg-config
      - go-md2man
      - cri-o-runc
      - libudev-dev
      - software-properties-common
      - gcc
      - make
    update_cache: true

- name: Make sure systemd Is up to date with latest changes
  systemd:
    daemon_reload: true

- name: Enable and start cri-o container runtime on all nodes
  service:
    name: crio
    enabled: true
    state: started

- name: install https and certificates tools
  apt:
    package:
      - apt-transport-https
      - ca-certificates
      - curl
    state: present


- name: Add kubernetes apt repository to hosts
  shell: |
    sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list


- name: Install k8s components on nodes
  apt:
    pkg:
      - kubelet
      - kubeadm
      - kubectl
    update_cache: true


- name: Hold k8s components on all nodes
  dpkg_selections:
    name: {{ item }}
    selection: hold
  loop:
    - kubeadm
    - kubelet
    - kubectl

- name: init cluster control-plane
  shell: |
  kubeadm init --ignore-preflight-errors=all --v=5
  delegate_to: {{ leading_master }}

- name: Extract join command for workers
  command: kubeadm token create --print-join-command
  register: join_command

#- name: Add new master to control-plane
#//todo

- name: Join all workers to cluster
  delegate_to: "{{ item }}"
  command: "{{ join_command.stdout }} --ignore-preflight-errors=all --v=5"
  with_items: "{{ groups['workers'] }}"

- name: Copy systemd unit mount file for BPF to all nodes
  copy:
    src: sys-fs-bpf.mount
    dest: /etc/systemd/system/sys-fs-bpf.mount
    mode: "777"

- name: Mount BPF device on all nodes.
  mount:
    state: mounted
    fstype: bpf
    src: bpffs
    path: /sys/fs/bpf


- name: Mount cgroupv2 on all hosts and make it shared
  command: mount /run/cilium/cgroupv2 --make-shared

- name: Restart Kubelet on all nodes
  service:
    name: kubelet
    state: restarted


- name: Install helm on master node
  delegate_to: {{ leading_master }}
  shell: |
    curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    chmod 700 /tmp/get_helm.sh
    /tmp/get_helm.sh


- name: Add cilium helm repo
  delegate_to: {{ leading_master }}
  helm_repository:
    name: cilium
    repo_url: https://helm.cilium.io/


- name: Install Cilium for containers Networking and network policies
  delegate_to: {{ leading_master }}
  helm:
    name: cilium
    chart_ref: cilium/cilium
    chart_version: {{ cilium_chart_version }}
    namespace: kube-system
    state: present


- name: Copy manifest of metrics server to master
  delegate_to: {{ leading_master }}
  copy:
    src: metrics-server.yaml
    dest: /tmp/metrics-server.yaml
    mode: "777"

- name: Apply metrics-server manifest to the cluster.
  delegate_to: {{ leading_master }}
  k8s:
    state: present
    src: /tmp/metrics-server.yaml
